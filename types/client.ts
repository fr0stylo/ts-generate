//Code generated by go generate; DO NOT EDIT.

export class HttpClient {
  private baseUrl: string;

  constructor(baseUrl: string) {
    this.baseUrl = baseUrl;
  }

  private async request<T>(url: string, method: string, body?: any): Promise<T> {
    const options: RequestInit = {
      method,
      headers: {
        "Content-Type": "application/json",
      },
    };

    if (body) {
      options.body = JSON.stringify(body);
    }

    const response = await fetch(`${this.baseUrl}${url}`, options);

    if (!response.ok) {
      throw new Error(`HTTP Error: ${response.status}`);
    }

    return response.json();
  }

  public async get<T>(url: string): Promise<T> {
    return this.request<T>(url, "GET");
  }

  public async post<T>(url: string, body?: any): Promise<T> {
    return this.request<T>(url, "POST", body);
  }

  public async put<T>(url: string, body?: any): Promise<T> {
    return this.request<T>(url, "PUT", body);
  }

  public async delete<T>(url: string): Promise<T> {
    return this.request<T>(url, "DELETE");
  }
}

const client = new HttpClient("https://jsonplaceholder.typicode.com/");

export default client;
