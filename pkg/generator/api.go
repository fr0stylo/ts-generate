package generator

import (
	"bytes"
	"io"
	"text/template"
)

const templateText = `export class HttpClient {
  private baseUrl: string;

  constructor(baseUrl: string) {
    this.baseUrl = baseUrl;
  }

  private async request<T>(url: string, method: string, body?: any): Promise<T> {
    const options: RequestInit = {
      method,
      headers: {
        "Content-Type": "application/json",
      },
    };

    if (body) {
      options.body = JSON.stringify(body);
    }

    const response = await fetch(` + "`${this.baseUrl}${url}`" + `, options);

    if (!response.ok) {
      throw new Error(` + "`HTTP Error: ${response.status}`" + `);
    }

    return response.json();
  }

  public async get<T>(url: string): Promise<T> {
    return this.request<T>(url, "GET");
  }

  public async post<T>(url: string, body?: any): Promise<T> {
    return this.request<T>(url, "POST", body);
  }

  public async put<T>(url: string, body?: any): Promise<T> {
    return this.request<T>(url, "PUT", body);
  }

  public async delete<T>(url: string): Promise<T> {
    return this.request<T>(url, "DELETE");
  }
}

const client = new HttpClient("{{.BaseURL}}");

export default client;
`

type Api struct {
	BaseURL string
}

func (api *Api) GenerateApi() io.Reader {
	t := template.Must(template.New("api").Parse(templateText))

	buf := bytes.NewBufferString("//Code generated by go generate; DO NOT EDIT.\n\n")
	t.Execute(buf, api)

	return buf
}
